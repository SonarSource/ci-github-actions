---
name: Build NPM
description: GitHub Action to build, analyze, and deploy an NPM project with SonarQube integration
inputs:
  public:
    description: Whether to build and deploy with/to public repositories. Set to `true` for public repositories (OSS), `false` for private.
    default: ${{ github.event.repository.visibility == 'public' && 'true' || 'false' }}
  artifactory-reader-role:
    description: Suffix for the Artifactory reader role in Vault. Defaults to `private-reader` for private repositories, and `public-reader`
      for public repositories.
    default: ''
  artifactory-deployer-role:
    description: Suffix for the Artifactory deployer role in Vault. Defaults to `qa-deployer` for private repositories, and
      `public-deployer` for public repositories.
    default: ''
  artifactory-deploy-repo:
    description: Name of deployment repository
    default: ''
  artifactory-deploy-access-token:
    description: Access token to deploy to Artifactory
    default: ''
  deploy-pull-request:
    description: Whether to deploy pull request artifacts
    default: 'false'
  skip-tests:
    description: Whether to skip running tests
    default: 'false'
  cache-npm:
    description: Whether to cache NPM dependencies
    default: 'true'
  repox-url:
    description: URL for Repox
    default: https://repox.jfrog.io
  sonar-platform:
    description: SonarQube primary platform (next, sqc-eu, or sqc-us)
    default: next

outputs:
  project-version:
    description: The project version from package.json
    value: ${{ steps.build.outputs.project-version }}
  build-info-url:
    description: The JFrog build info UI URL
    value: ${{ steps.build.outputs.BUILD_INFO_URL }}


runs:
  using: composite
  steps:
    - name: Get build number
      uses: SonarSource/ci-github-actions/get-build-number@master
      id: build-number
    - name: Set build parameters
      shell: bash
      env:
        ARTIFACTORY_READER_ROLE: ${{ inputs.artifactory-reader-role != '' && inputs.artifactory-reader-role ||
          (inputs.public == 'true' && 'public-reader' || 'private-reader') }}
        ARTIFACTORY_DEPLOYER_ROLE: ${{ inputs.artifactory-deployer-role != '' && inputs.artifactory-deployer-role ||
          (inputs.public == 'true' && 'public-deployer' || 'qa-deployer') }}
      run: |
        echo "ARTIFACTORY_READER_ROLE=${ARTIFACTORY_READER_ROLE}" >> "$GITHUB_ENV"
        echo "ARTIFACTORY_DEPLOYER_ROLE=${ARTIFACTORY_DEPLOYER_ROLE}" >> "$GITHUB_ENV"

    - name: Setup build tools
      shell: bash
      run: |
        cp ${GITHUB_ACTION_PATH}/mise.local.toml mise.local.toml

    - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
      with:
        version: 2025.7.12

    - name: Cache NPM dependencies
      if: ${{ inputs.cache-npm == 'true' }}
      uses: SonarSource/ci-github-actions/cache@master
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Vault
      # yamllint disable rule:line-length
      id: secrets
      uses: SonarSource/vault-action-wrapper@d6d745ffdbc82b040df839b903bc33b5592cd6b0 # 3.0.2
      with:
        secrets: |
          development/kv/data/${{ inputs.sonar-platform == 'sqc-eu' && 'sonarcloud' || (inputs.sonar-platform == 'sqc-us' && 'sonarqube-us' || 'next') }} url | SONAR_HOST_URL;
          development/kv/data/${{ inputs.sonar-platform == 'sqc-eu' && 'sonarcloud' || (inputs.sonar-platform == 'sqc-us' && 'sonarqube-us' || 'next') }} token | SONAR_TOKEN;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_READER_ROLE }} access_token | ARTIFACTORY_ACCESS_TOKEN;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_DEPLOYER_ROLE }} access_token | ARTIFACTORY_DEPLOY_ACCESS_TOKEN;
      # yamllint enable rule:line-length
    - name: Build, test, analyze and deploy
      id: build
      shell: bash
      env:
        # GitHub context
        PULL_REQUEST: ${{ github.event.pull_request.number || '' }}
        PULL_REQUEST_SHA: ${{ github.event.pull_request.base.sha || '' }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

        # Action inputs
        ARTIFACTORY_URL: ${{ inputs.repox-url }}/artifactory
        ARTIFACTORY_DEPLOY_REPO: ${{ inputs.artifactory-deploy-repo }}
        ARTIFACTORY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_ACCESS_TOKEN }}
        ARTIFACTORY_DEPLOY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_ACCESS_TOKEN }}
        DEPLOY_PULL_REQUEST: ${{ inputs.deploy-pull-request }}
        SKIP_TESTS: ${{ inputs.skip-tests }}

        # Vault secrets
        SONAR_HOST_URL: ${{ fromJSON(steps.secrets.outputs.vault).SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).SONAR_TOKEN }}
      run: |
        ${GITHUB_ACTION_PATH}/build.sh

    - name: Generate workflow summary
      if: always()
      shell: bash
      run: |
        echo "## 📦 NPM Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Basic build information
        echo "### 📋 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${GITHUB_REPOSITORY#*/}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.build.outputs.project-version || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Deployment information
        if [[ -n "${{ inputs.artifactory-deploy-repo }}" ]]; then
          echo "### 🚀 Deployment" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.build.conclusion }}" == "success" ]]; then
            echo "✅ **Artifacts deployed to Artifactory**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ARTIFACTORY_BROWSE_URL="${{ steps.build.outputs.build-info-url }}"
            echo "🔗 **[Browse artifacts in Artifactory](${ARTIFACTORY_BROWSE_URL})**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed** (build unsuccessful)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
