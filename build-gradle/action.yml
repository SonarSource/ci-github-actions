---
name: Build Gradle
description: GitHub Action to build, analyze, and deploy a Gradle project with SonarQube integration
inputs:
  public:
    description: Whether to build and deploy with/to public repositories. Set to `true` for public repositories (OSS), `false` for private.
    default: ${{ github.event.repository.visibility == 'public' && 'true' || 'false' }}
  artifactory-deploy-repo:
    description: Name of deployment repository
    default: ''
  artifactory-reader-role:
    description: Suffix for the Artifactory reader role in Vault. Defaults to `private-reader` for private repositories,
      and `public-reader` for public repositories.
    default: ''
  artifactory-deployer-role:
    description: Suffix for the Artifactory deployer role in Vault. Defaults to `qa-deployer` for private repositories, and
      `public-deployer` for public repositories.
    default: ''
  gradle-args:
    description: Additional arguments to pass to Gradle
  deploy-pull-request:
    description: Whether to deploy pull request artifacts
    default: 'false'
  skip-tests:
    description: Whether to skip running tests
    default: 'false'
  use-develocity:
    description: Whether to use Develocity for build tracking.
    default: 'false'
  develocity-url:
    description: URL for Develocity
    default: https://develocity.sonar.build/
  repox-url:
    description: URL for Repox
    default: https://repox.jfrog.io
  sonar-platform:
    description: SonarQube variant (next, sqc-eu, or sqc-us)
    default: next
  run-shadow-scans:
    description: If true, run sonar scanner on all 3 platforms using the provided URL and token.
     If false, run on the platform provided by SONAR_PLATFORM.
    default: 'false'

outputs:
  project-version:
    description: The project version from gradle.properties
    value: ${{ steps.build.outputs.project-version }}

runs:
  using: composite
  steps:
    - name: Get build number
      uses: SonarSource/ci-github-actions/get-build-number@master
    - name: Set build parameters
      shell: bash
      env:
        ARTIFACTORY_READER_ROLE: ${{ inputs.artifactory-reader-role != '' && inputs.artifactory-reader-role ||
          (inputs.public == 'true' && 'public-reader' || 'private-reader') }}
        ARTIFACTORY_DEPLOYER_ROLE: ${{ inputs.artifactory-deployer-role != '' && inputs.artifactory-deployer-role ||
          (inputs.public == 'true' && 'public-deployer' || 'qa-deployer') }}
      run: |
        echo "ARTIFACTORY_READER_ROLE=${ARTIFACTORY_READER_ROLE}" >> "$GITHUB_ENV"
        echo "ARTIFACTORY_DEPLOYER_ROLE=${ARTIFACTORY_DEPLOYER_ROLE}" >> "$GITHUB_ENV"

    - name: Vault
      id: secrets
      uses: SonarSource/vault-action-wrapper@320bd31b03e5dacaac6be51bbbb15adf7caccc32 # 3.1.0
      with:
        # yamllint disable rule:line-length
        secrets: |
          development/kv/data/next url | NEXT_URL;
          development/kv/data/next token | NEXT_TOKEN;
          development/kv/data/sonarqube-us url | SQC_US_URL;
          development/kv/data/sonarqube-us token | SQC_US_TOKEN;
          development/kv/data/sonarcloud url | SQC_EU_URL;
          development/kv/data/sonarcloud token | SQC_EU_TOKEN;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_READER_ROLE }} username | ARTIFACTORY_USERNAME;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_READER_ROLE }} access_token | ARTIFACTORY_ACCESS_TOKEN;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_DEPLOYER_ROLE }} username | ARTIFACTORY_DEPLOY_USERNAME;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_DEPLOYER_ROLE }} access_token | ARTIFACTORY_DEPLOY_ACCESS_TOKEN;
          development/kv/data/sign key | SIGN_KEY;
          development/kv/data/sign passphrase | PGP_PASSPHRASE;
          development/kv/data/sign key_id | SIGN_KEY_ID;
          ${{ inputs.use-develocity == 'true' && 'development/kv/data/develocity token | DEVELOCITY_TOKEN;' || '' }}
        # yamllint enable rule:line-length

    # Configure Gradle for comprehensive caching and build summary reporting. It does not install Gradle.
    - name: Configure Gradle
      uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
      with:
        develocity-access-key: >-
         ${{ inputs.use-develocity == 'true' &&
         fromJSON(steps.secrets.outputs.vault).DEVELOCITY_TOKEN || '' }}
        develocity-injection-enabled: ${{ inputs.use-develocity == 'true' }}
    # $GRADLE_USER_HOME is typically set to ~/.gradle/ by gradle/actions/setup-gradle
    - name: Configure Gradle Authentication
      shell: bash
      run: |
        GRADLE_INIT_DIR="$GRADLE_USER_HOME/init.d"
        mkdir -p "$GRADLE_INIT_DIR"
        cp "${GITHUB_ACTION_PATH}/resources/repoxAuth.init.gradle.kts" "$GRADLE_INIT_DIR/"

    - name: Build, analyze and deploy
      id: build
      shell: bash
      env:
        # GitHub context
        PULL_REQUEST: ${{ github.event.pull_request.number || '' }}
        PULL_REQUEST_SHA: ${{ github.event.pull_request.base.sha || '' }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

        # Action inputs
        ARTIFACTORY_URL: ${{ inputs.repox-url }}/artifactory
        ARTIFACTORY_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_USERNAME }} # unused; present for backward compliance
        ARTIFACTORY_ACCESS_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_USERNAME }} # deprecated, backward compliance
        ARTIFACTORY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_ACCESS_TOKEN }}
        ARTIFACTORY_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_ACCESS_TOKEN }} # deprecated, backward compliance
        ARTIFACTORY_DEPLOY_REPO: ${{ inputs.artifactory-deploy-repo != '' && inputs.artifactory-deploy-repo ||
          (inputs.public == 'true' && 'sonarsource-public-qa' || 'sonarsource-private-qa') }}
        ARTIFACTORY_DEPLOY_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_USERNAME }}
        ARTIFACTORY_DEPLOY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_ACCESS_TOKEN }}
        ARTIFACTORY_DEPLOY_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_ACCESS_TOKEN }} # used in parent POM
        DEPLOY_PULL_REQUEST: ${{ inputs.deploy-pull-request }}
        SKIP_TESTS: ${{ inputs.skip-tests }}
        GRADLE_ARGS: ${{ inputs.gradle-args }}

        # Vault secrets - always fetch all platforms
        NEXT_URL: ${{ fromJSON(steps.secrets.outputs.vault).NEXT_URL }}
        NEXT_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).NEXT_TOKEN }}
        SQC_US_URL: ${{ fromJSON(steps.secrets.outputs.vault).SQC_US_URL }}
        SQC_US_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).SQC_US_TOKEN }}
        SQC_EU_URL: ${{ fromJSON(steps.secrets.outputs.vault).SQC_EU_URL }}
        SQC_EU_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).SQC_EU_TOKEN }}
        SONAR_PLATFORM: ${{ inputs.sonar-platform }}
        RUN_SHADOW_SCANS: ${{ inputs.run-shadow-scans }}
        ORG_GRADLE_PROJECT_signingKey: ${{ fromJSON(steps.secrets.outputs.vault).SIGN_KEY }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ fromJSON(steps.secrets.outputs.vault).PGP_PASSPHRASE }}
        ORG_GRADLE_PROJECT_signingKeyId: ${{ fromJSON(steps.secrets.outputs.vault).SIGN_KEY_ID }}
      run: |
        ${GITHUB_ACTION_PATH}/build.sh

    - name: Archive problems report
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: problems-report-${{ github.job }}
        path: build/reports/problems/problems-report.html
        if-no-files-found: ignore

    - name: Generate workflow summary
      if: always()
      shell: bash
      run: |
        echo "## 🏗️ Gradle Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Basic build information
        echo "### 📋 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${GITHUB_REPOSITORY#*/}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.build.outputs.project-version || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: $BUILD_NUMBER" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Deployment information
        if [[ -n "${{ inputs.artifactory-deploy-repo }}" ]]; then
          echo "### 🚀 Deployment" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.build.conclusion }}" == "success" ]]; then
            echo "✅ **Artifacts deployed to Artifactory**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ARTIFACTORY_BROWSE_URL="${{ inputs.repox-url }}/ui/repos/tree/General/${{ inputs.artifactory-deploy-repo }}"
            echo "🔗 **[Browse artifacts in Artifactory](${ARTIFACTORY_BROWSE_URL})**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed** (build unsuccessful)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
