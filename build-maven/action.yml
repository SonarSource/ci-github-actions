---
name: Build Maven
description: GitHub Action to build, analyze, and deploy a Maven project
inputs:
  artifactory-deployer-role:
    description: Suffix for the Artifactory deployer role in Vault. Defaults to `qa-deployer` for private repositories, and
      `public-deployer` for public repositories.
    default: ''
  deploy-pull-request:
    description: Whether to deploy pull request artifacts.
    default: 'false'
  maven-args:
    description: Additional Maven arguments to pass to the build script.
    default: ''
  scanner-java-opts:
    description: Additional Java options for the Sonar scanner (`SONAR_SCANNER_JAVA_OPTS`).
    default: -Xmx512m
  use-develocity:
    description: Whether to use Develocity for build tracking.
    default: 'false'
  develocity-url:
    description: URL for Develocity
    default: https://develocity.sonar.build/
  sonar-platform:
    description: SonarQube primary platform (next, sqc-eu, sqc-us, or none). Use 'none' to skip sonar scans.
    default: next
  working-directory:
    description: Relative path under github.workspace to execute the build in
    default: .
  run-shadow-scans:
    description: If true, run SonarQube analysis on all three platforms (next, sqc-eu, sqc-us).
      If false, run analysis on the platform specified with sonar-platform.
    default: 'false'

runs:
  using: composite
  steps:
    - name: Set build parameters
      shell: bash
      env:
        ARTIFACTORY_DEPLOYER_ROLE: ${{ inputs.artifactory-deployer-role != '' && inputs.artifactory-deployer-role ||
          (github.event.repository.visibility == 'public' && 'public-deployer' || 'qa-deployer') }}
      run: |
        echo "ARTIFACTORY_DEPLOYER_ROLE=${ARTIFACTORY_DEPLOYER_ROLE}" >> "$GITHUB_ENV"
    - name: Vault
      # yamllint disable rule:line-length
      id: secrets
      uses: SonarSource/vault-action-wrapper@320bd31b03e5dacaac6be51bbbb15adf7caccc32 # 3.1.0
      with:
        secrets: |
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_DEPLOYER_ROLE }} username | ARTIFACTORY_DEPLOY_USERNAME;
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_DEPLOYER_ROLE }} access_token | ARTIFACTORY_DEPLOY_ACCESS_TOKEN;

          development/kv/data/next url | NEXT_URL;
          development/kv/data/next token | NEXT_TOKEN;
          development/kv/data/sonarqube-us url | SQC_US_URL;
          development/kv/data/sonarqube-us token | SQC_US_TOKEN;
          development/kv/data/sonarcloud url | SQC_EU_URL;
          development/kv/data/sonarcloud token | SQC_EU_TOKEN;

          development/kv/data/sign key | SIGN_KEY;
          development/kv/data/sign passphrase | PGP_PASSPHRASE;
          ${{ inputs.use-develocity == 'true' && 'development/kv/data/develocity token | DEVELOCITY_TOKEN;' || '' }}
      # yamllint enable rule:line-length
    - name: Build, Analyze and deploy
      shell: bash
      id: build
      env:
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        ARTIFACTORY_DEPLOY_REPO:
          ${{ github.event.repository.visibility == 'public' && 'sonarsource-public-qa' || 'sonarsource-private-qa' }}
        ARTIFACTORY_DEPLOY_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_USERNAME }}
        ARTIFACTORY_DEPLOY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_ACCESS_TOKEN }}
        ARTIFACTORY_DEPLOY_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_DEPLOY_ACCESS_TOKEN }} # used in parent POM
        SIGN_KEY: ${{ fromJSON(steps.secrets.outputs.vault).SIGN_KEY }}
        SQC_EU_URL: ${{ fromJSON(steps.secrets.outputs.vault).SQC_EU_URL }}
        SQC_US_URL: ${{ fromJSON(steps.secrets.outputs.vault).SQC_US_URL }}
        NEXT_URL: ${{ fromJSON(steps.secrets.outputs.vault).NEXT_URL }}
        NEXT_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).NEXT_TOKEN }}
        SQC_EU_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).SQC_EU_TOKEN }}
        SQC_US_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).SQC_US_TOKEN }}
        SONAR_PLATFORM: ${{ inputs.sonar-platform }}
        RUN_SHADOW_SCANS: ${{ inputs.run-shadow-scans }}
        PGP_PASSPHRASE: ${{ fromJSON(steps.secrets.outputs.vault).PGP_PASSPHRASE }}
        DEPLOY_PULL_REQUEST: ${{ inputs.deploy-pull-request }}
        PULL_REQUEST: ${{ github.event.pull_request.number || '' }}
        PULL_REQUEST_SHA: ${{ github.event.pull_request.base.sha || '' }}
        DEVELOCITY_ACCESS_KEY: ${{ inputs.use-develocity == 'true' &&
          format('develocity.sonar.build={0}', fromJSON(steps.secrets.outputs.vault).DEVELOCITY_TOKEN) || '' }}
        USER_MAVEN_ARGS: ${{ inputs.maven-args }}
        SONAR_SCANNER_JAVA_OPTS: ${{ inputs.scanner-java-opts }}
      working-directory: ${{ inputs.working-directory }}
      run: ${GITHUB_ACTION_PATH}/build.sh $USER_MAVEN_ARGS

    - name: Cleanup Maven repository before caching
      shell: bash
      run: |
        rm -rf "$HOME/.m2/repository/org/sonarsource/"
        rm -rf "$HOME/.m2/repository/repository/com/sonarsource/"
        /usr/bin/find "$HOME/.m2/repository" -name resolver-status.properties -delete

    - name: Generate workflow summary
      if: always()
      shell: bash
      run: |
        if [[ "${{ steps.build.conclusion }}" == "success" ]]; then
          echo "# ✅ Build & Deployment Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "# ❌ Build & Deployment Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## **Details**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: \`${GITHUB_REPOSITORY#*/}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${PROJECT_VERSION}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: ${BUILD_NUMBER}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        ARTIFACTORY_BROWSE_URL="https://repox.jfrog.io/ui/builds/${GITHUB_REPOSITORY#*/}/$BUILD_NUMBER"
        echo "- **Build**: [View in Artifactory](${ARTIFACTORY_BROWSE_URL})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
